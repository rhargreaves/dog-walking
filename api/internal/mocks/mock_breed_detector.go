// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/rhargreaves/dog-walking/api/internal/dogs/domain"
	mock "github.com/stretchr/testify/mock"
)

// BreedDetector is an autogenerated mock type for the BreedDetector type
type BreedDetector struct {
	mock.Mock
}

type BreedDetector_Expecter struct {
	mock *mock.Mock
}

func (_m *BreedDetector) EXPECT() *BreedDetector_Expecter {
	return &BreedDetector_Expecter{mock: &_m.Mock}
}

// DetectBreed provides a mock function with given fields: id
func (_m *BreedDetector) DetectBreed(id string) (*domain.BreedDetectionResult, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DetectBreed")
	}

	var r0 *domain.BreedDetectionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.BreedDetectionResult, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.BreedDetectionResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BreedDetectionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BreedDetector_DetectBreed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectBreed'
type BreedDetector_DetectBreed_Call struct {
	*mock.Call
}

// DetectBreed is a helper method to define mock.On call
//   - id string
func (_e *BreedDetector_Expecter) DetectBreed(id interface{}) *BreedDetector_DetectBreed_Call {
	return &BreedDetector_DetectBreed_Call{Call: _e.mock.On("DetectBreed", id)}
}

func (_c *BreedDetector_DetectBreed_Call) Run(run func(id string)) *BreedDetector_DetectBreed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BreedDetector_DetectBreed_Call) Return(_a0 *domain.BreedDetectionResult, _a1 error) *BreedDetector_DetectBreed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BreedDetector_DetectBreed_Call) RunAndReturn(run func(string) (*domain.BreedDetectionResult, error)) *BreedDetector_DetectBreed_Call {
	_c.Call.Return(run)
	return _c
}

// NewBreedDetector creates a new instance of BreedDetector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBreedDetector(t interface {
	mock.TestingT
	Cleanup(func())
}) *BreedDetector {
	mock := &BreedDetector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
